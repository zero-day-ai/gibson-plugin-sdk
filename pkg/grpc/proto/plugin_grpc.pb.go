// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: pkg/grpc/proto/plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_GetInfo_FullMethodName      = "/gibson.plugin.v1.PluginService/GetInfo"
	PluginService_Assess_FullMethodName       = "/gibson.plugin.v1.PluginService/Assess"
	PluginService_StreamAssess_FullMethodName = "/gibson.plugin.v1.PluginService/StreamAssess"
	PluginService_BatchAssess_FullMethodName  = "/gibson.plugin.v1.PluginService/BatchAssess"
	PluginService_HealthCheck_FullMethodName  = "/gibson.plugin.v1.PluginService/HealthCheck"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PluginService defines the main gRPC service for Gibson plugins
type PluginServiceClient interface {
	// GetInfo returns plugin metadata and capabilities
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Assess performs a security assessment
	Assess(ctx context.Context, in *AssessRequest, opts ...grpc.CallOption) (*AssessResponse, error)
	// StreamAssess performs streaming security assessment
	StreamAssess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssessRequest, AssessResponse], error)
	// BatchAssess performs batch security assessments
	BatchAssess(ctx context.Context, in *BatchAssessRequest, opts ...grpc.CallOption) (*BatchAssessResponse, error)
	// Health check for plugin availability
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, PluginService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Assess(ctx context.Context, in *AssessRequest, opts ...grpc.CallOption) (*AssessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssessResponse)
	err := c.cc.Invoke(ctx, PluginService_Assess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) StreamAssess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssessRequest, AssessResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], PluginService_StreamAssess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AssessRequest, AssessResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginService_StreamAssessClient = grpc.BidiStreamingClient[AssessRequest, AssessResponse]

func (c *pluginServiceClient) BatchAssess(ctx context.Context, in *BatchAssessRequest, opts ...grpc.CallOption) (*BatchAssessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAssessResponse)
	err := c.cc.Invoke(ctx, PluginService_BatchAssess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PluginService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
//
// PluginService defines the main gRPC service for Gibson plugins
type PluginServiceServer interface {
	// GetInfo returns plugin metadata and capabilities
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Assess performs a security assessment
	Assess(context.Context, *AssessRequest) (*AssessResponse, error)
	// StreamAssess performs streaming security assessment
	StreamAssess(grpc.BidiStreamingServer[AssessRequest, AssessResponse]) error
	// BatchAssess performs batch security assessments
	BatchAssess(context.Context, *BatchAssessRequest) (*BatchAssessResponse, error)
	// Health check for plugin availability
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPluginServiceServer) Assess(context.Context, *AssessRequest) (*AssessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assess not implemented")
}
func (UnimplementedPluginServiceServer) StreamAssess(grpc.BidiStreamingServer[AssessRequest, AssessResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssess not implemented")
}
func (UnimplementedPluginServiceServer) BatchAssess(context.Context, *BatchAssessRequest) (*BatchAssessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAssess not implemented")
}
func (UnimplementedPluginServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Assess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Assess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Assess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Assess(ctx, req.(*AssessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_StreamAssess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginServiceServer).StreamAssess(&grpc.GenericServerStream[AssessRequest, AssessResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginService_StreamAssessServer = grpc.BidiStreamingServer[AssessRequest, AssessResponse]

func _PluginService_BatchAssess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAssessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).BatchAssess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_BatchAssess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).BatchAssess(ctx, req.(*BatchAssessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gibson.plugin.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _PluginService_GetInfo_Handler,
		},
		{
			MethodName: "Assess",
			Handler:    _PluginService_Assess_Handler,
		},
		{
			MethodName: "BatchAssess",
			Handler:    _PluginService_BatchAssess_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PluginService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssess",
			Handler:       _PluginService_StreamAssess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/proto/plugin.proto",
}
